local scriptContent = [[
local players = game:GetService("Players")
local collectionService = game:GetService("CollectionService")
local localPlayer = players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

-- Debugging print to confirm script execution start
print("Pet Randomizer Script: Starting execution.")

-- Ensure LocalPlayer is available. Use game.Players.LocalPlayer first, as it's the standard.
if not localPlayer then
    localPlayer = players:GetPlayers()[1] -- Fallback for some non-standard environments
    if not localPlayer then
        warn("Pet Randomizer Script: ERROR - Could not get LocalPlayer. GUI will not appear.")
        return -- Exit if LocalPlayer is not found, as the script cannot function without it
    end
end
print("Pet Randomizer Script: LocalPlayer obtained:", localPlayer.Name)

-- Egg chances data (UPDATED with Primal Egg and Zen Egg)
local eggChances = {
    ["Common Egg"] = {["Dog"] = 33, ["Bunny"] = 33, ["Golden Lab"] = 33},
    ["Uncommon Egg"] = {["Black Bunny"] = 25, ["Chicken"] = 25, ["Cat"] = 25, ["Deer"] = 25},
    ["Rare Egg"] = {["Orange Tabby"] = 33.33, ["Spotted Deer"] = 25, ["Pig"] = 16.67, ["Rooster"] = 16.67, ["Monkey"] = 8.33},
    ["Legendary Egg"] = {["Cow"] = 42.55, ["Silver Monkey"] = 42.55, ["Sea Otter"] = 10.64, ["Turtle"] = 2.13, ["Polar Bear"] = 2.13},
    ["Mythic Egg"] = {["Grey Mouse"] = 37.5, ["Brown Mouse"] = 26.79, ["Squirrel"] = 26.79, ["Red Giant Ant"] = 8.93, ["Red Fox"] = 0},
    ["Bug Egg"] = {["Snail"] = 40, ["Giant Ant"] = 35, ["Caterpillar"] = 25, ["Praying Mantis"] = 0, ["Dragon Fly"] = 0},
    ["Night Egg"] = {["Hedgehog"] = 47, ["Mole"] = 23.5, ["Frog"] = 21.16, ["Echo Frog"] = 8.35, ["Night Owl"] = 0, ["Raccoon"] = 0},
    ["Bee Egg"] = {["Bee"] = 65, ["Honey Bee"] = 20, ["Bear Bee"] = 10, ["Petal Bee"] = 5, ["Queen Bee"] = 0},
    ["Anti Bee Egg"] = {["Wasp"] = 55, ["Tarantula Hawk"] = 31, ["Moth"] = 14, ["Butterfly"] = 0, ["Disco Bee"] = 0},
    ["Common Summer Egg"] = {["Starfish"] = 50, ["Seafull"] = 25, ["Crab"] = 25},
    ["Rare Summer Egg"] = {["Flamingo"] = 30, ["Toucan"] = 25, ["Sea Turtle"] = 20, ["Orangutan"] = 15, ["Seal"] = 10},
    ["Paradise Egg"] = {["Ostrich"] = 43, ["Peacock"] = 33, ["Capybara"] = 24, ["Scarlet Macaw"] = 3, ["Mimic Octopus"] = 1},
    ["Premium Night Egg"] = {["Hedgehog"] = 50, ["Mole"] = 26, ["Frog"] = 14, ["Echo Frog"] = 10},
    ["Dinosaur Egg"] = {["Raptor"] = 33, ["Triceratops"] = 33, ["T-Rex"] = 1, ["Stegosaurus"] = 33, ["Pterodactyl"] = 33, ["Brontosaurus"] = 33},
    ["Primal Egg"] = { ["Parasaurolophus"] = 35, ["Iguanodon"] = 32.5, ["Pachycephalosaurus"] = 28, ["Dilophosaurus"] = 3, ["Ankylosaurus"] = 1, ["Spinosaurus"] = 0.5 },
    ["Zen Egg"] = { ["Shiba Inu"] = 33, ["Nihonnizaru"] = 33, ["Tanuki"] = 28, ["Tanchozuru"] = 23, ["Kappa"] = 3.5, ["Kitsune"] = 1 } -- Using user-provided percentages
}

-- Eggs for which ESP is considered "real" (always show egg name, not random pet)
local realESP = {
    ["Common Egg"] = true, ["Uncommon Egg"] = true, ["Rare Egg"] = true,
    ["Common Summer Egg"] = true, ["Rare Summer Egg"] = true,
    ["Primal Egg"] = true, -- Assuming Primal Egg should always show its name
    ["Zen Egg"] = true -- Assuming Zen Egg should always show its name
}

local displayedEggs = {} -- Stores information about currently displayed ESPs
local espOn = true -- State for ESP display (default ON)

-- Function to pick a random pet based on weighted chances
local function weightedRandom(options)
    local valid = {}
    for pet, chance in pairs(options) do
        if chance > 0 then table.insert(valid, {pet = pet, chance = chance}) end
    end
    if #valid == 0 then return nil end
    local total = 0
    for _, v in ipairs(valid) do total += v.chance end
    local roll = math.random() * total
    local cumulative = 0
    for _, v in ipairs(valid) do
        cumulative += v.chance
        if roll <= cumulative then return v.pet end
    end
    return valid[1].pet -- Fallback in case of floating point inaccuracies
end

-- Function to get a non-repeating random pet (STRICTLY non-repeating unless no other options)
local function getNonRepeatingRandomPet(eggName, lastPet)
    local pool = eggChances[eggName]
    if not pool then
        warn("Pet Randomizer Script: No chance pool found for egg:", eggName) -- Added warn
        return nil
    end

    local availablePets = {}
    for pet, chance in pairs(pool) do
        if pet ~= lastPet and chance > 0 then -- Only add if different from lastPet and has chance > 0
            table.insert(availablePets, {pet = pet, chance = chance})
        end
    end

    if #availablePets == 0 then
        -- If no other pets are available, or only the last pet is available,
        -- then we have to pick the last pet or nil if pool is empty/invalid.
        return weightedRandom(pool) -- Fallback to any pet from the original pool
    else
        -- Otherwise, pick from the available (non-repeating) pets
        local total = 0
        for _, v in ipairs(availablePets) do total += v.chance end
        local roll = math.random() * total
        local cumulative = 0
        for _, v in ipairs(availablePets) do
            cumulative += v.chance
            if roll <= cumulative then return v.pet end
        end
        return availablePets[1].pet -- Fallback
    end
end

-- Function to create the BillboardGui for ESP
local function createEspGui(object, labelText)
    -- Ensure the object has a valid BasePart to Adornee to
    local adorneePart = object:FindFirstChildWhichIsA("BasePart") or object.PrimaryPart
    if not adorneePart then
        warn("Pet Randomizer Script: WARN - Cannot create ESP, no valid BasePart or PrimaryPart found for object:", object.Name)
        return nil -- Return nil if no valid adornee can be found
    end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "FakePetESP"
    billboard.Adornee = adorneePart -- Use the found part
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2.5, 0)
    billboard.AlwaysOnTop = true
    billboard.Enabled = espOn -- Set initial enabled state based on espOn variable

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold -- Consistent font
    label.Text = labelText
    label.Parent = billboard

    billboard.Parent = object -- Parent to the object itself
    print("Pet Randomizer Script: Created ESP for", object.Name, "with text:", labelText, "Enabled:", billboard.Enabled)
    return billboard
end

-- Function to add ESP to an egg
local function addESP(egg)
    print("Pet Randomizer Script: addESP called for egg:", egg.Name, "Owner:", egg:GetAttribute("OWNER"))
    -- Only show ESP for eggs owned by the local player
    if egg:GetAttribute("OWNER") ~= localPlayer.Name then
        print("Pet Randomizer Script: Egg not owned by local player, skipping ESP for:", egg.Name)
        return
    end
    local eggName = egg:GetAttribute("EggName")
    local objectId = egg:GetAttribute("OBJECT_UUID")
    if not eggName or not objectId then
        warn("Pet Randomizer Script: Missing EggName or OBJECT_UUID for egg:", egg.Name)
        return
    end
    -- If ESP already exists for this objectId, destroy it and recreate to ensure fresh state
    if displayedEggs[objectId] then
        print("Pet Randomizer Script: ESP already exists for", egg.Name, "(ID:", objectId, "). Destroying old and recreating.")
        if displayedEggs[objectId].gui then
            displayedEggs[objectId].gui:Destroy()
        end
        displayedEggs[objectId] = nil -- Clear the old entry
    end


    local labelText, firstPet
    if realESP[eggName] then
        labelText = eggName
    else
        firstPet = getNonRepeatingRandomPet(eggName, nil)
        labelText = eggName .. " | " .. (firstPet or "?")
    end

    local espGui = createEspGui(egg, labelText)
    if not espGui then -- Added check: if createEspGui failed, don't try to store it
        warn("Pet Randomizer Script: Failed to create ESP GUI for egg:", egg.Name, "ID:", objectId)
        return
    end

    displayedEggs[objectId] = {
        egg = egg,
        gui = espGui,
        label = espGui:FindFirstChild("TextLabel"), -- Ensure label is found
        eggName = eggName,
        lastPet = firstPet
    }
    -- Critical check: Ensure label was actually found
    if not displayedEggs[objectId].label then
        warn("Pet Randomizer Script: WARN - TextLabel not found within created ESP GUI for egg:", egg.Name, "ID:", objectId)
        -- Optionally clean up the GUI if it's incomplete
        espGui:Destroy()
        displayedEggs[objectId] = nil
        return
    end

    print("Pet Randomizer Script: Successfully added ESP to displayedEggs for egg:", egg.Name, "ID:", objectId)
    -- Ensure newly added ESP respects the current espOn state
    espGui.Enabled = espOn
end

-- Function to remove ESP from an egg
local function removeESP(egg)
    local objectId = egg:GetAttribute("OBJECT_UUID")
    if objectId and displayedEggs[objectId] then
        if displayedEggs[objectId].gui then -- Added check for gui existence before destroying
            displayedEggs[objectId].gui:Destroy()
            print("Pet Randomizer Script: Destroyed ESP GUI for egg ID:", objectId)
        else
            warn("Pet Randomizer Script: WARN - ESP GUI not found in displayedEggs for egg ID:", objectId, "during removal.")
        end
        displayedEggs[objectId] = nil
        print("Pet Randomizer Script: Removed entry for egg ID:", objectId)
    end
end

-- Initial setup for existing eggs
for _, egg in collectionService:GetTagged("PetEggServer") do
    addESP(egg)
end

-- Connect to signals for new and removed eggs
collectionService:GetInstanceAddedSignal("PetEggServer"):Connect(addESP)
collectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(removeESP)

-- AGGRESSIVE GUI PARENTING LOGIC
local function waitForPlayerGui()
    local tries = 0
    while tries < 10 do -- Try for up to 10 seconds
        local playerGui = localPlayer:FindFirstChild("PlayerGui")
        if playerGui then return playerGui end
        tries += 1
        task.wait(1) -- Wait 1 second between tries
    end
    return nil -- Return nil if PlayerGui is not found after all tries
end

-- Function to create and set up the main GUI elements and their connections
local function setupGUI()
    print("Pet Randomizer Script: Setting up GUI elements and connections...")

    -- Create the main ScreenGui
    local gui = Instance.new("ScreenGui")
    gui.Name = "PetRandomizerGUI"
    gui.ResetOnSpawn = false -- Important for persistent GUI across spawns
    gui.Archivable = true -- Ensure it can be archived/replicated if needed (good practice)
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Ensure ZIndex works correctly between elements

    -- ### CRITICAL CHANGE HERE: ENSURE PlayerGui IS READY BEFORE PARENTING ###
    local playerGui = localPlayer:FindFirstChild("PlayerGui")
    if not playerGui then
        print("Pet Randomizer Script: Waiting for PlayerGui...")
        -- Using a robust wait for PlayerGui to ensure it's loaded
        repeat
            playerGui = localPlayer:FindFirstChild("PlayerGui")
            task.wait(0.1) -- Small wait to prevent busy-looping
        until playerGui ~= nil
        print("Pet Randomizer Script: PlayerGui found after wait.")
    end
    -- ### END CRITICAL CHANGE ###

    if playerGui then
        gui.Parent = playerGui
        print("✅ Pet Randomizer Script: GUI successfully parented to PlayerGui.")
    else
        warn("❌ Pet Randomizer Script: GUI NOT parented - PlayerGui not found after retrying. Exiting GUI setup.")
        return -- Exit function if GUI cannot be parented
    end

    -- Debug Immediately: Check GUI visibility after a short delay
    task.delay(2, function()
        if gui and gui.Parent then
            warn("✅ Pet Randomizer Script: GUI visible in", gui.Parent:GetFullName())
        else
            warn("❌ Pet Randomizer Script: GUI still not visible or parented after 2 seconds.")
        end
    end)

    -- *** NEW GUI STRUCTURE FOR ABSOLUTE TOP PLACEMENT & DRAGGING ***

    -- Header Frame (Contains Title and MadeBy, and is the draggable element)
    local headerFrame = Instance.new("Frame")
    headerFrame.Name = "HeaderFrame"
    headerFrame.Size = UDim2.new(0, 250, 0, 60) -- Height for title + madeBy + padding
    headerFrame.Position = UDim2.new(0.5, -125, 0, 10) -- Centered horizontally, 10px from top
    headerFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Darker background
    headerFrame.BorderSizePixel = 0
    headerFrame.Parent = gui -- Parent directly to ScreenGui
    headerFrame.Active = true -- Make it active to receive input for dragging
    headerFrame.ZIndex = 4 -- Ensure it's on top of mainFrame and ESPs

    -- Rounded corners for HeaderFrame
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 8) -- Adjust as needed for desired roundness
    headerCorner.Parent = headerFrame

    -- Title Text (👾 Pet Randomizer 👾) - ABSOLUTELY ON TOP within HeaderFrame (using absolute position)
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30) -- Fill width of parent, fixed height
    titleLabel.Position = UDim2.new(0, 0, 0, 5) -- 5px from top of HeaderFrame
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold -- Consistent font
    titleLabel.Text = "👾 Pet Randomizer 👾"
    titleLabel.TextXAlignment = Enum.TextXAlignment.Center
    titleLabel.Parent = headerFrame -- Child of headerFrame
    titleLabel.ZIndex = 5 -- Ensure this is highest in the header

    -- Made by Creoleo Text - ABSOLUTELY BELOW Title within HeaderFrame (using absolute position)
    local madeByLabel = Instance.new("TextLabel")
    madeByLabel.Name = "MadeByLabel"
    madeByLabel.Size = UDim2.new(1, 0, 0, 20) -- Fill width of parent, fixed height
    madeByLabel.Position = UDim2.new(0, 0, 0, titleLabel.Position.Y.Offset + titleLabel.Size.Y.Offset + 0) -- Immediately below title (no gap)
    madeByLabel.BackgroundTransparency = 1
    madeByLabel.TextColor3 = Color3.fromRGB(180, 180, 180) -- Slightly grey text
    madeByLabel.TextScaled = false
    madeByLabel.Font = Enum.Font.SourceSansBold -- Consistent font
    madeByLabel.TextSize = 14
    madeByLabel.Text = "Made by - Creoleo"
    madeByLabel.TextXAlignment = Enum.TextXAlignment.Center
    madeByLabel.Parent = headerFrame -- Child of headerFrame
    madeByLabel.ZIndex = 5 -- Ensure this is high in the header

    -- Main Frame (Contains buttons)
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 250, 0, 130) -- Adjusted size to fit buttons + padding (10+50+10+50+10 = 130)
    -- Position relative to ScreenGui, directly below headerFrame (NO GAP)
    mainFrame.Position = UDim2.new(headerFrame.Position.X.Scale, headerFrame.Position.X.Offset, 0, headerFrame.Position.Y.Offset + headerFrame.Size.Y.Offset) -- No gap
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Darker background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = gui -- Parent directly to ScreenGui
    mainFrame.Active = true -- Make it active for interaction (buttons)
    mainFrame.ZIndex = 3 -- Below headerFrame, above game world

    -- Rounded corners for MainFrame
    local mainFrameCorner = Instance.new("UICorner")
    mainFrameCorner.CornerRadius = UDim.new(0, 8) -- Adjust as needed
    mainFrameCorner.Parent = mainFrame

    -- ### DEBUG: Confirm GUI elements exist before connecting events ###
    print("Pet Randomizer Script: HeaderFrame exists:", headerFrame ~= nil, "Parent:", headerFrame.Parent and headerFrame.Parent.Name or "nil")
    print("Pet Randomizer Script: MainFrame exists:", mainFrame ~= nil, "Parent:", mainFrame.Parent and mainFrame.Parent.Name or "nil")
    -- ### END DEBUG ###

    -- Manual Dragging Logic for HeaderFrame (Moves HeaderFrame and mainFrame)
    local dragging
    local dragStart
    local headerStartPos
    local mainStartPos

    headerFrame.InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end

        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            headerStartPos = headerFrame.Position
            mainStartPos = mainFrame.Position
            print("Pet Randomizer Script: Dragging started on HeaderFrame.")
            return true
        end
    end)

    headerFrame.InputChanged:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end

        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            if dragging then
                -- CRITICAL FIX FOR LINE 327: Check if input and input.Position exist
                if input and input.Position then
                    local delta = input.Position - dragStart
                    headerFrame.Position = UDim2.new(headerStartPos.X.Scale, headerStartPos.X.Offset + delta.X, headerStartPos.Y.Scale, headerStartPos.Y.Offset + delta.Y)
                    mainFrame.Position = UDim2.new(mainStartPos.X.Scale, mainStartPos.X.Offset + delta.X, mainStartPos.Y.Scale, mainStartPos.Y.Offset + delta.Y)
                else
                    warn("Pet Randomizer Script: WARN - Input or Input.Position was nil during drag InputChanged.")
                end
                return true
            end
        end
    end)

    headerFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            print("Pet Randomizer Script: Dragging ended.")
        end
    end)

    -- Add a UIListLayout for vertical arrangement of buttons inside mainFrame
    local listLayout = Instance.new("UIListLayout")
    listLayout.FillDirection = Enum.FillDirection.Vertical
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    listLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    listLayout.Padding = UDim.new(0, 10) -- Padding between buttons
    listLayout.Parent = mainFrame

    -- Add a UIPadding for padding inside the mainFrame for buttons
    local uiPadding = Instance.new("UIPadding")
    uiPadding.PaddingTop = UDim.new(0, 10)
    uiPadding.PaddingBottom = UDim.new(0, 10)
    uiPadding.PaddingLeft = UDim.new(0, 10)
    uiPadding.PaddingRight = UDim.new(0, 10)
    uiPadding.Parent = mainFrame

    -- Function to create a styled button (NO ICONS)
    local function createStyledButton(text, parentFrame, onClickFunction, bgColor)
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 0, 50) -- Full width of parent, fixed height
        button.BackgroundColor3 = bgColor or Color3.fromRGB(45, 45, 45) -- Custom background color
        button.TextColor3 = Color3.new(1, 1, 1)
        button.TextScaled = true
        button.Font = Enum.Font.SourceSansBold -- Consistent font
        button.Text = text
        button.BorderSizePixel = 0
        button.Parent = parentFrame
        button.Active = true -- Ensure button is active for clicks
        button.ZIndex = 5 -- Ensure buttons are on top of everything else for clicks

        -- Rounded corners for button
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 8) -- Adjust as needed
        buttonCorner.Parent = button

        -- Add a UIStroke for a subtle border effect
        local uiStroke = Instance.new("UIStroke")
        uiStroke.Color = Color3.fromRGB(60, 60, 60)
        uiStroke.Thickness = 1
        uiStroke.Parent = button

        -- Visual feedback on button press
        local originalColor = button.BackgroundColor3
        button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                button.BackgroundColor3 = originalColor:Lerp(Color3.new(0.3, 0.3, 0.3), 0.5) -- Darken on press
                print("Pet Randomizer Script: Button '" .. text .. "' InputBegan - Visual feedback applied.")
            end
        end)
        button.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                button.BackgroundColor3 = originalColor -- Revert color
                print("Pet Randomizer Script: Button '" .. text .. "' InputEnded - Visual feedback reverted.")
            end
        end)


        button.MouseButton1Click:Connect(onClickFunction)
        print("Pet Randomizer Script: Created button:", text)
        return button
    end

    -- Randomize Pets Button
    local randomizePetsBtn = createStyledButton("Randomize Pets", mainFrame, function()
        print("Pet Randomizer Script: 'Randomize Pets' button clicked.")
        for objectId, data in pairs(displayedEggs) do
            -- Added check for data.label to prevent error if it somehow became nil
            if data and data.eggName and data.label then
                local pet = getNonRepeatingRandomPet(data.eggName, data.lastPet)
                if pet then -- Only update if a pet was successfully chosen
                    data.label.Text = data.eggName .. " | " .. pet
                    data.lastPet = pet
                    print("Pet Randomizer Script: Rerolled egg", objectId, "to", pet)
                else
                    warn("Pet Randomizer Script: Could not reroll pet for egg ID:", objectId, "Egg Name:", data.eggName, "(No valid pets found or getNonRepeatingRandomPet returned nil)")
                end
            else
                warn("Pet Randomizer Script: Skipping reroll for objectId:", objectId, "due to missing data (data, eggName, or label).")
            end
        end
    end, Color3.fromRGB(255, 140, 0)) -- Orange color from image
    randomizePetsBtn.LayoutOrder = 1 -- First button in the list

    -- ESP Toggle Button
    local espToggleBtn = createStyledButton("ESP: ON", mainFrame, function()
        print("Pet Randomizer Script: ESP button clicked. Current espOn state BEFORE toggle:", espOn)
        espOn = not espOn
        espToggleBtn.Text = espOn and "ESP: ON" or "ESP: OFF"
        print("Pet Randomizer Script: ESP toggled to:", espOn, "Button text updated to:", espToggleBtn.Text)

        -- Iterate through all currently displayed ESPs and update their Enabled state
        local espCount = 0
        for objectId, data in pairs(displayedEggs) do
            espCount = espCount + 1
            if data and data.egg then -- Check for the egg object, not necessarily existing GUI yet
                local egg = data.egg
                local eggName = egg:GetAttribute("EggName")
                local labelText = eggName

                if not realESP[eggName] then
                    labelText = eggName .. " | " .. (data.lastPet or "?")
                end

                if espOn then -- If turning ESP ON
                    if not data.gui or not data.gui.Parent or not data.gui.Adornee then
                        -- GUI is missing or invalid, try to re-create it fully
                        print("Pet Randomizer Script: ESP is ON and GUI for", objectId, "is missing/invalid. Recreating.")
                        -- Ensure old GUI is destroyed if it partially exists
                        if data.gui then data.gui:Destroy() end
                        displayedEggs[objectId] = nil -- Clear old entry
                        addESP(egg) -- Re-add the ESP
                    else
                        -- GUI exists and is valid, just ensure it's enabled
                        data.gui.Enabled = true
                        print("Pet Randomizer Script: Set ESP GUI Enabled to true for egg ID:", objectId, "Egg Name:", data.eggName)
                    end
                else -- If turning ESP OFF
                    if data.gui then
                        data.gui.Enabled = false
                        print("Pet Randomizer Script: Set ESP GUI Enabled to false for egg ID:", objectId, "Egg Name:", data.eggName)
                    else
                        warn("Pet Randomizer Script: WARN - ESP GUI not found for egg ID:", objectId, "during OFF toggle. Egg Name:", data and data.eggName)
                    end
                end
            else
                warn("Pet Randomizer Script: WARN - Egg object not found for egg ID:", objectId, "in displayedEggs during toggle. (Might have been removed)")
                -- Clean up invalid entry
                if displayedEggs[objectId] and displayedEggs[objectId].gui then
                    displayedEggs[objectId].gui:Destroy()
                end
                displayedEggs[objectId] = nil
            end
        end
        print("Pet Randomizer Script: DEBUG: Finished iterating through", espCount, "displayedEggs for ESP toggle.")

        -- The re-add logic below is still important for eggs added *while* ESP was off
        if espOn then
            print("Pet Randomizer Script: ESP is ON. Re-checking and ensuring ESP for existing eggs.")
            for _, egg in collectionService:GetTagged("PetEggServer") do
                local currentObjectId = egg:GetAttribute("OBJECT_UUID")
                if currentObjectId then
                    -- Only call addESP if it's not already displayed OR if it's displayed but disabled
                    if not displayedEggs[currentObjectId] or (displayedEggs[currentObjectId] and displayedEggs[currentObjectId].gui and not displayedEggs[currentObjectId].gui.Enabled) then
                        print("Pet Randomizer Script: Calling addESP for egg:", egg.Name, "as it's not displayed or enabled.")
                        addESP(egg)
                    else
                        print("Pet Randomizer Script: Egg", egg.Name, "already has ESP displayed and enabled, skipping addESP.")
                    end
                else
                    warn("Pet Randomizer Script: WARN - Egg without OBJECT_UUID found during ESP toggle re-check:", egg.Name)
                end
            end
        end
    end, Color3.fromRGB(45, 45, 45)) -- Dark grey for ESP button
    espToggleBtn.LayoutOrder = 2 -- Second button in the list

    -- Initial update of button texts
    espToggleBtn.Text = espOn and "ESP: ON" or "ESP: OFF"

    print("Pet Randomizer Script: GUI setup complete.")
end

-- Call the GUI setup function after initial ESP setup
setupGUI()

print("Pet Randomizer Script: Initialization complete.")
]]

-- Attempt to load and execute the script content
local success, func = pcall(loadstring, scriptContent)

if success and func then
    -- Check if func is actually a function before calling
    if typeof(func) == "function" then
        func()
        print("Loader Script: Successfully loaded and executed the main script.")
    else
        warn("Loader Script: ERROR - `loadstring` returned something unexpected (not a function). Type:", typeof(func), "Value:", tostring(func))
    end
else
    warn("Loader Script: ERROR - Failed to load and execute the main script:", func)
    -- If loadstring failed, 'func' contains the error message (a string)
    -- This is the most direct cause of "attempt to call a string value" if 'func' is then called.
    print("Loader Script: Loadstring failure details:", func)
end
